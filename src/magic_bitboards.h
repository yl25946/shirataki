#pragma once

#include "defs.h"
#include "attacks.h"
#include "utils.h"

// extern const uint8_t bishop_relevant_bits[64];
// extern const uint8_t rook_relevant_bits[64];

// these are used for getting the number of bitshifts, calculated in init_slider()
constexpr uint8_t bishop_shifts[64] = {
    58,
    59,
    59,
    59,
    59,
    59,
    59,
    58,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    57,
    57,
    57,
    57,
    59,
    59,
    59,
    59,
    57,
    55,
    55,
    57,
    59,
    59,
    59,
    59,
    57,
    55,
    55,
    57,
    59,
    59,
    59,
    59,
    57,
    57,
    57,
    57,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    58,
    59,
    59,
    59,
    59,
    59,
    59,
    58,
};

constexpr uint8_t rook_shifts[64] = {
    52,
    53,
    53,
    53,
    53,
    53,
    53,
    52,
    53,
    54,
    54,
    54,
    54,
    54,
    54,
    53,
    53,
    54,
    54,
    54,
    54,
    54,
    54,
    53,
    53,
    54,
    54,
    54,
    54,
    54,
    54,
    53,
    53,
    54,
    54,
    54,
    54,
    54,
    54,
    53,
    53,
    54,
    54,
    54,
    54,
    54,
    54,
    53,
    53,
    54,
    54,
    54,
    54,
    54,
    54,
    53,
    52,
    53,
    53,
    53,
    53,
    53,
    53,
    52,
};

// rook magic numbers
constexpr uint64_t rook_magic_numbers[64]{
    0x2080022240001080ULL,
    0x4c0004010082000ULL,
    0x808010002000800cULL,
    0x2080080080041000ULL,
    0x1600200830046200ULL,
    0x8300280400020100ULL,
    0x2000420a8012200ULL,
    0x200018403304302ULL,
    0x41800021814004ULL,
    0x2004400220100042ULL,
    0x802000100080ULL,
    0x2a4801000840800ULL,
    0x8a01001008010004ULL,
    0x80c0800400020080ULL,
    0x82000401080200ULL,
    0x42200010c208842ULL,
    0x880004000200054ULL,
    0x40a0008020804000ULL,
    0x8c21858020009000ULL,
    0x42f2000a004020ULL,
    0x4301003c110800ULL,
    0x20808004000200ULL,
    0x8808002000100ULL,
    0x20021008044ULL,
    0x8012802180004000ULL,
    0x50004000200cULL,
    0x2000100080200080ULL,
    0x400100100090020ULL,
    0x108020040400400ULL,
    0xc0210029000a1400ULL,
    0x82008040400100ULL,
    0x8200040041ULL,
    0x400804000800022ULL,
    0x250002010400042ULL,
    0x64aa2200820031c0ULL,
    0x2d48801000800800ULL,
    0x4001009005000800ULL,
    0x1012800200800400ULL,
    0x20411004000288ULL,
    0x8100208402000059ULL,
    0x2220804000208009ULL,
    0x500020024000ULL,
    0x42c8801200420021ULL,
    0x290080010008080ULL,
    0x4710080004008080ULL,
    0x8002000410020008ULL,
    0x2810002008080ULL,
    0x10230501409a0004ULL,
    0x120800040002080ULL,
    0x2010002000400c40ULL,
    0x240901200410c100ULL,
    0x1140500080080280ULL,
    0x8000400098180ULL,
    0x2802000204008080ULL,
    0x5000200040100ULL,
    0x1080004504840600ULL,
    0x301008010402202ULL,
    0x6020410282012116ULL,
    0x180208a0012c2ULL,
    0x4084050010000821ULL,
    0x281002408001013ULL,
    0x4842000104181026ULL,
    0x2050080082013004ULL,
    0x411000210040840eULL,
};

// bishop magic numbers
constexpr uint64_t bishop_magic_numbers[64] = {
    0x4040020202020010ULL,
    0x404440424002844ULL,
    0x222020042010000ULL,
    0x3011040b80801002ULL,
    0x802021008802010ULL,
    0x90120324d0000ULL,
    0x102c008208202082ULL,
    0x700240104012000ULL,
    0x8806200250020082ULL,
    0x12a310040f0140ULL,
    0x4000884212421000ULL,
    0x5040c404c800048ULL,
    0x200240420810000ULL,
    0x22091002100000ULL,
    0x4000288410484424ULL,
    0x2821450048020840ULL,
    0x20410802040814ULL,
    0x1008083110510044ULL,
    0x44000840540100ULL,
    0x3020800802004040ULL,
    0x2004003188a00000ULL,
    0x8001004280600240ULL,
    0x8c004042080500ULL,
    0x501248212090400ULL,
    0x2018d48040506200ULL,
    0x5802021030148801ULL,
    0x8241202080201ULL,
    0x51090048004100ULL,
    0x102840085802000ULL,
    0x4c2020001880514ULL,
    0x8404004004220200ULL,
    0x2288200030104c0ULL,
    0x27228c010c49000ULL,
    0x4201044206208800ULL,
    0x4802080100880ULL,
    0xa0100401c0040ULL,
    0x60440440440100ULL,
    0x830008201010904ULL,
    0x14480480220080ULL,
    0x24040022088081ULL,
    0xa040820841112050ULL,
    0x10401a0040400ULL,
    0x464a0c0404004200ULL,
    0x1a0124080201ULL,
    0x1083010100900ULL,
    0x8001214102000100ULL,
    0xa020920c00411901ULL,
    0x928a604420400c0ULL,
    0x200490818c00000ULL,
    0x5024442221100000ULL,
    0x1000210822000dULL,
    0xb84280084040009ULL,
    0x282202015240804ULL,
    0x20419002022090ULL,
    0x232840800a40006ULL,
    0x8a21110111010012ULL,
    0x4012020601040300ULL,
    0x80030061042001ULL,
    0x28a0205008820ULL,
    0x4040c00022c21200ULL,
    0x21c840008030400ULL,
    0x4200180860088084ULL,
    0x410100200a2ULL,
    0x8010044808042020ULL,
};

uint64_t set_occupancy(int index, int bits_in_mask, uint64_t attack_mask);

// find approriate magic numbers
uint64_t find_magic_number(uint8_t square, int relevant_bits, int bishop);

// finds all the magic numbers
void init_magic_numbers();